from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.cross_decomposition import PLSRegression
from sklearn.svm import SVR
from sklearn.ensemble import AdaBoostRegressor
import math
from sklearn import metrics
import joblib
import matplotlib.pyplot as plt

from sklearn.model_selection import cross_val_score  #交叉验证模块


def aaa(x_train, x_test):
    models = [PLSRegression(), SVR(),AdaBoostRegressor()]
    models_str = ['PLSRegression  ', 'SVR','AdaBoost']


    def calc_corr(a, b):
        a_avg = sum(a) / len(a)
        b_avg = sum(b) / len(b)
        cov_ab = sum([(x - a_avg) * (y - b_avg) for x, y in zip(a, b)])
        sq = math.sqrt(sum([(x - a_avg) ** 2 for x in a]) * sum([(x - b_avg) ** 2 for x in b]))
        corr_factor = cov_ab / sq
        return corr_factor
   

    def rmse(a, b):
        c = np.sqrt(metrics.mean_squared_error(a, b))
        return c

    for name, model in zip(models_str, models):
        print('开始训练模型：' + name)
        Rcv = math.sqrt(np.average(cross_val_score(model, x_train, y_train, cv=10,scoring='r2')))
        RMSECV = abs(np.average(cross_val_score(model, x_train, y_train, cv=10, scoring='neg_root_mean_squared_error')))
        model = model.fit(x_train, y_train)
        y_train_pre = model.predict(x_train)
        y_test_pre = model.predict(x_test)
        #保存模型
        joblib.dump(model,'xxxxx.pkl')
        # model = joblib.load('xxxxx.pkl') 调用模型
        


        Rc = calc_corr(y_train_pre, y_train)
        RMSEC = rmse(y_train_pre, y_train)

        Rp = calc_corr(y_test_pre, y_test)
        RMSEP = rmse(y_test_pre, y_test)
        E(RMSEC, RMSEP)
        RPD(y_test, y_test_pre)


        print(name, 'Rc is', '%.2f' % Rc, '  ', 'RMSEC is', '%.2f' % RMSEC, '  ','Rcv is', '%.2f' % Rcv, '  ','RMSECV is', '%.2f' % RMSECV, '  ', 'Rp is', '%.2f' % Rp, '  ',
              'RMSEP is', '%.2f' % RMSEP)
        print(y_test_pre, y_test)



aaa(x_train, x_test)
